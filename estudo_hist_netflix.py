# -*- coding: utf-8 -*-
"""Estudo_hist_netflix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FnimV06dYB1yR95y9QIRtNStxCVjFe1j
"""

# Criando uma análise sobre Filmes e series assistida na Netflix em Spark

#Criando a bibliotecas necessárias para leitura e estudo da base.
from pyspark.sql import SparkSession
from pyspark.sql.functions import to_date, split, element_at, when, col, count, year
import matplotlib.pyplot as plt
import seaborn as sns
spark = SparkSession.builder.appName("ExemploCSV").getOrCreate()

#lendo a base que está no diretório do colab
df = spark.read.csv("/content/NetflixViewingHistory.csv", header=True, inferSchema=True)
# Exibe as primeiras linhas
df.show()

# observando os tipos de dados que estão na base. tendo que mudar o tipo de Date string para Date com o formato "M/d/yy"
df.printSchema()

#Realizando a conversão do tipo de dados de string para "M/d/yy" e droppando a variavel com o formato string.
df2 = df.withColumn("data_assistido", to_date(df["Date"], "M/d/yy")).drop("Date")
df3 = df2.select("Title", "data_assistido")
df2.show()

df2.printSchema()

count = df2.count()
print("1. O usuário desta conta assistiu {} vezes".format(count))

# usei a função Split que separa o meu texto por um delimitador em comun entre todas as linhas da variavel.
df3 = df2.withColumn("separador", split(df2["Title"], ":"))

df3.show()

# Após usar o separador peguei somente a parcela da 1 e 2 e separei entre variaveis diferentes com a função element_at.
df4 = df3.withColumn("Titulo", element_at(df3["separador"], 1)) \
         .withColumn("Episodio", element_at(df3["separador"], 2)) \
         .drop("separador")

df4.select("Titulo","Episodio","data_assistido").show()

# Atribui aos valores Null como filme, pois os filmes tem somente o primeiro nome na coluna primaria (Title) de dados.
df5 = df4.withColumn("Tipo", when(col("Episodio").isNull(), "Filme").otherwise(col("Episodio"))).drop("Title", "Episodio")
df5.show()

#df5.groupBy("Titulo").count().orderBy("Titulo", ascending=False).show()
df_grouped = df5.groupBy("Titulo").agg(count("Tipo").alias("Quantidade"))
df_grouped.show(truncate=False)

df6 = df4.withColumn("Tipo", when(col("Episodio").isNull(), "Filme").otherwise("Série")) \
         .drop("Title", "Episodio")
df6.show()

df_grouped = df6.groupBy("Tipo", "data_assistido").agg(count("Titulo").alias("Quantidade")).orderBy("data_assistido", ascending=False)
df_grouped.show(truncate=False)

df_extr = df_grouped.withColumn("Ano", year(col("data_assistido")))
df_extr.show()

df_pandas = df_extr.toPandas()

# Criar o gráfico de linhas
plt.figure(figsize=(10, 6))
sns.lineplot(data=df_pandas, x="Ano", y="Quantidade", hue="Tipo", marker="o")

# Adicionar rótulos e título
plt.xlabel("Ano")
plt.ylabel("Quantidade Assistida")
plt.title("Evolução do Consumo de Filmes e Séries ao Longo dos Anos")
plt.legend(title="Tipo de Conteúdo")

# Exibir o gráfico
plt.show()

!pip install pygwalker

import pygwalker as pyg

pyg.walk(df_extr)

